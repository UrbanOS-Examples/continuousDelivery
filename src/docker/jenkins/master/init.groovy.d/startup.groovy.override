import com.amazonaws.ClientConfiguration
import com.amazonaws.regions.RegionUtils
import com.amazonaws.services.ecs.AmazonECSClient
import com.amazonaws.util.EC2MetadataUtils
import com.amazonaws.services.elasticloadbalancing.*
import com.amazonaws.services.elasticloadbalancing.model.*
import com.cloudbees.jenkins.plugins.amazonecs.ECSCloud
import com.cloudbees.jenkins.plugins.amazonecs.ECSTaskTemplate
import hudson.model.*
import hudson.plugins.gradle.*
import hudson.security.*
import hudson.tools.*
import jenkins.model.*
import jenkins.model.Jenkins
import jenkins.model.JenkinsLocationConfiguration

import java.util.logging.Logger

Logger.global.info("[Running] startup script")

configureSecurity()
configureJenkinsURL()
configureCloud()

Jenkins.instance.save()

Logger.global.info("[Done] startup script")

private configureSecurity() {
    def jenkins = Jenkins.get()
    jenkins.setAuthorizationStrategy(new FullControlOnceLoggedInAuthorizationStrategy())

    def securityRealm = new LDAPSecurityRealm(
      "ldaps://iam-master.alm.internal.smartcolumbusos.com", //server
      "dc=internal,dc=smartcolumbusos,dc=com", //rootDn
      "cn=users,cn=accounts", //userSearchBase
      "uid={0}", //userSearchFilter
      "cn=groups,cn=accounts", //groupSearchBase
      "uid=binduser,cn=users,cn=accounts,dc=internal,dc=smartcolumbusos,dc=com", //managerDN
      System.getenv("LDAP_BINDUSER_PWD"),
      true, //inhibitInferRootDN
    )
    jenkins.setSecurityRealm(securityRealm)

    //this port is fixed so it can be configured in the security group
    jenkins.setSlaveAgentPort(50000)

    jenkins.save()
}

private configureJenkinsURL() {
    String jenkinsURL = "https://jenkins.alm.internal.smartcolumbusos.com"
    Logger.global.info("Set Jenkins URL to $jenkinsURL")
    def config = JenkinsLocationConfiguration.get()
    config.url = jenkinsURL
    config.save()
}

private getClientConfiguration() {
    new ClientConfiguration()
}

private String getPrivateIP() {
    EC2MetadataUtils.networkInterfaces.first().localIPv4s.first()
}

private String getInstanceUrl() {
    "http://${privateIP}:8080/"
}

private String getRegion() {
    EC2MetadataUtils.instanceInfo.region
}

private String queryJenkinsClusterArn(String regionName) {
    AmazonECSClient client = new AmazonECSClient(clientConfiguration)
    client.setRegion(RegionUtils.getRegion(regionName))
    client.listClusters().getClusterArns().find { it.endsWith('jenkins-cluster') }
}

private void configureCloud() {
    try {
        Logger.global.info("Creating ECS Template")
        def ecsTemplates = templates = Arrays.asList(
                //a t2.micro has 992 memory units & 1024 CPU units
                createECSTaskTemplate('ecs-java', 'cloudbees/jnlp-slave-with-java-build-tools', 992, 1024),
                createECSTaskTemplate('ecs-javascript', 'cloudbees/jnlp-slave-with-java-build-tools', 496, 512)
        )
        String clusterArn = queryJenkinsClusterArn(region)

        Logger.global.info("Creating ECS Cloud for $clusterArn")
        def ecsCloud = new ECSCloud(
                name = "jenkins_cluster",
                templates = ecsTemplates,
                credentialsId = '',
                cluster = clusterArn,
                regionName = region,
                jenkinsUrl = instanceUrl,
                slaveTimoutInSeconds = 60
        )

        Jenkins.instance.clouds.clear()
        Jenkins.instance.clouds.add(ecsCloud)
    } catch (com.amazonaws.SdkClientException e) {
        Logger.global.severe({ e.message })
        Logger.global.severe("ERROR: Could not create ECS config, are you running this container in AWS?")
    }
}

//cloudbees/jnlp-slave-with-java-build-tools
private ECSTaskTemplate createECSTaskTemplate(String label, String image, int softMemory, int cpu) {
    Logger.global.info("Creating ECS Template '$label' for image '$image' (memory: softMemory, cpu: $cpu)")
    new ECSTaskTemplate(
            templateName = label,
            label = label,
            image = image,
            remoteFSRoot = "/home/jenkins",
            //memory reserved
            memory = 0,
            //soft memory
            memoryReservation = softMemory,
            cpu = cpu,
            privileged = false,
            logDriverOptions = null,
            environments = null,
            extraHosts = null,
            mountPoints = null
    )
}
